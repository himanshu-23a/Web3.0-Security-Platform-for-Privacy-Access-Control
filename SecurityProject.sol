// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import "./SafeMath.sol";contract SecurityProject {    address public owner;    constructor() {        owner = msg.sender;    }    modifier onlyOwner() {        require(msg.sender == owner, "Only the owner can call this function");        _; // Continue with the execution of the function if the condition is met    }    using SafeMath for uint256;    uint256 public value;    function add(uint256 amount) public onlyOwner {        value = value.add(amount); // Safely add 'amount' to 'value'    }    function subtract(uint256 amount) public onlyOwner {        value = value.sub(amount); // Safely subtract 'amount' from 'value'    }    function validateInput(uint256 amount) public pure returns (bool) {        require(amount > 0, "Input must be greater than zero");        return true;    }    function revertTransaction() public pure {        require(false, "Error occurred, reverting transaction");    }}