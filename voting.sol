// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Voting {    // State variables    bool public isVoting;    struct Vote {        address receiver;        uint256 timestamp;    }      mapping(address => Vote) public votes;    mapping(address => uint256) public voteCount;    // Events    event AddVote(address indexed voter, address receiver, uint256 timestamp);    event RemoveVote(address voter);    event StartVoting(address startedBy);    event StopVoting(address stoppedBy);    // Constructor    constructor() {        isVoting = false;    }    // Function to start voting process    function startVoting() external returns(bool) {        isVoting = true;        emit StartVoting(msg.sender);        return true;    }    // Function to stop voting process    function stopVoting() external returns(bool) {        isVoting = false;        emit StopVoting(msg.sender);        return true;    }    // Function to add a vote    function addVote(address receiver) external returns(bool) {        voteCount[receiver]++;        votes[msg.sender].receiver = receiver;        votes[msg.sender].timestamp = block.timestamp;        emit AddVote(msg.sender, receiver, block.timestamp);        return true;    }    // Function to remove a vote    function removeVote() external returns(bool) {        voteCount[votes[msg.sender].receiver]--;        delete votes[msg.sender];        emit RemoveVote(msg.sender);        return true;    }    // Function to get the candidate voted for by an address    function getVote(address voterAddress) external view returns(address candidateAddress) {        return votes[voterAddress].receiver;    }    // Function to get the total number of votes received by a candidate    function getVoteCount(address candidate) external view returns(uint256) {        return voteCount[candidate];    }}