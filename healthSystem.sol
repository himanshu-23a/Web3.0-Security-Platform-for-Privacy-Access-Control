// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract HealthcareSystem {    struct Patient {        string name;        address ethAddress;        bool isRegistered;    }    struct MedicalRecord {        string description;        string medicalData; // Actual medical data        address provider;    }    mapping(address => Patient) private patients;    mapping(address => MedicalRecord[]) private medicalRecords;    event MedicalRecordShared(address indexed patientAddress, address indexed provider, string description);    event MedicalRecordAccessed(address indexed patientAddress, address indexed provider, string description);    modifier onlyRegisteredPatient() {        require(patients[msg.sender].isRegistered, "Patient not registered");        _;    }    function registerPatient(string memory _name) external {        require(!patients[msg.sender].isRegistered, "Patient already registered");        patients[msg.sender] = Patient({            name: _name,            ethAddress: msg.sender,            isRegistered: true        });    }    function addMedicalRecord(string memory _description, string memory _medicalData) external onlyRegisteredPatient {        medicalRecords[msg.sender].push(MedicalRecord({            description: _description,            medicalData: _medicalData,            provider: address(0)        }));    }    function shareMedicalRecord(address _provider) external onlyRegisteredPatient {        require(_provider != address(0), "Invalid provider address");        MedicalRecord[] storage records = medicalRecords[msg.sender];        for (uint256 i = 0; i < records.length; i++) {            if (records[i].provider == address(0)) {                records[i].provider = _provider;                emit MedicalRecordShared(msg.sender, _provider, records[i].description);            }        }    }    function accessMedicalRecord(address _patient) external view returns (MedicalRecord[] memory) {        require(patients[_patient].isRegistered, "Patient not registered");        return medicalRecords[_patient];    }}